on:
  push:
    branches:
      - staging

name: Deploy Backend to Staging

jobs:
  web-deploy:
    name: Deploy website
    runs-on: ubuntu-latest

    steps:
      - name: Get latest code
        uses: actions/checkout@v4

      - name: Setup .env
        run: |
          echo "APP_NAME='DF DATA CENTER STAGING'" >> .env
          echo "APP_ENV=local" >> .env
          echo "APP_KEY=" >> .env
          echo "APP_DEBUG=true" >> .env
          echo "APP_TIMEZONE=Asia/jakarta" >> .env
          echo "APP_URL=${{ secrets.APP_URL_STAGING }}" >> .env
          echo "APP_LOCALE=en" >> .env
          echo "APP_FALLBACK_LOCAL=en" >> .env
          echo "APP_FAKER_LOCALE=en_US" >> .env
          echo "APP_MAINTENANCE_DRIVER=file" >> .env
          echo "APP_MAINTENANCE_STORE=database" >> .env
          echo "BCRYPT_ROUNDS=12" >> .env
          echo "LOG_CHANNEL=${{ secrets.LOG_CHANNEL_STAGING }}" >> .env
          echo "LOG_STACK=${{ secrets.LOG_STACK_STAGING }}" >> .env
          echo "LOG_LEVEL=${{ secrets.LOG_LEVEL_STAGING }}" >> .env
          echo "DB_CONNECTION=${{ secrets.DB_CONNECTION_STAGING }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST_STAGING }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST_STAGING }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT_STAGING }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT_STAGING }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE_STAGING }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE_STAGING }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME_STAGING }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD_STAGING }}" >> .env
          echo "SESSION_DRIVER=${{ secrets.SESSION_DRIVER_STAGING }}" >> .env
          echo "SESSION_LIFETIME=${{ secrets.SESSION_LIFETIME_STAGING }}" >> .env
          echo "SESSION_ENCRYPT=${{ secrets.SESSION_ENCRYPT_STAGING }}" >> .env
          echo "SESSION_PATH=${{ secrets.SESSION_PATH_STAGING }}" >> .env
          echo "SESSION_DOMAIN=${{ secrets.SESSION_DOMAIN_STAGING }}" >> .env
          echo "BROADCAST_CONNECTION=${{ secrets.BROADCAST_CONNECTION_STAGING }}" >> .env
          echo "FILESYSTEM_DISK=${{ secrets.FILESYSTEM_DISK_STAGING }}" >> .env
          echo "QUEUE_CONNECTION=${{ secrets.QUEUE_CONNECTION_STAGING }}" >> .env
          echo "CACHE_STORE=${{ secrets.CACHE_STORE_STAGING }}" >> .env
          echo "MEMCACHED_HOST=${{ secrets.MEMCACHED_HOST_STAGING }}" >> .env
          echo "REDIS_CLIENT=${{ secrets.REDIS_CLIENT_STAGING }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST_STAGING }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD_STAGING }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT_STAGING }}" >> .env
          echo "MAIL_MAILER=${{ secrets.MAIL_MAILER_STAGING }}" >> .env
          echo "MAIL_HOST=${{ secrets.MAIL_HOST_STAGING }}" >> .env
          echo "MAIL_PORT=${{ secrets.MAIL_PORT_STAGING }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME_STAGING }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD_STAGING }}" >> .env
          echo "MAIL_ENCRYPTION=${{ secrets.MAIL_ENCRYPTION_STAGING }}" >> .env
          echo "MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS_STAGING }}" >> .env
          echo "MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME_STAGING }}" >> .env
          echo "VITE_APP_NAME='${APP_NAME}'" >> .env
          echo "SALT_KEY=${{ secrets.SALT_KEY_STAGING }}" >> .env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL_STAGING }}" >> .env
          echo "NAS_URL_LOCAL=${{ secrets.NAS_URL_LOCAL_STAGING }}" >> .env
          echo "TELESCOPE_ENABLED=${{ secrets.TELESCOPE_ENABLED_STAGING }}" >> .env
          echo "AUTH_GUARD=${{ secrets.AUTH_GUARD_STAGING }}" >> .env
          echo "LINE_TOKEN=${{ secrets.LINE_TOKEN_STAGING }}" >> .env
          echo "HASH_SALT=${{ secrets.HASH_SALT_STAGING }}" >> .env
          echo "GOOGLE_CONSOLE_API_KEY=${{ secrets.GOOGLE_CONSOLE_API_KEY_STAGING }}" >> .env
          echo "WORLD_DB_CONNECTION=${{ secrets.WORLD_DB_CONNECTION_STAGING }}" >> .env
          echo "PUSHER_APP_ID=${{ secrets.PUSHER_APP_ID_STAGING }}" >> .env
          echo "PUSHER_APP_KEY=${{ secrets.PUSHER_APP_KEY_STAGING }}" >> .env
          echo "PUSHER_APP_SECRET=${{ secrets.PUSHER_APP_SECRET_STAGING }}" >> .env
          echo "PUSHER_PORT=${{ secrets.PUSHER_PORT_STAGING }}" >> .env
          echo "PUSHER_SCHEME=${{ secrets.PUSHER_SCHEME_STAGING }}" >> .env
          echo "PUSHER_APP_CLUSTER=${{ secrets.PUSHER_APP_CLUSTER_STAGING }}" >> .env
          echo "ROOT_EMAIL=${{ secrets.ROOT_EMAIL_STAGING }}" >> .env
          echo "GEOAPIFY_KEY=${{ secrets.GEOAPIFY_KEY_STAGING }}" >> .env
          echo "SENTRY_LARAVEL_DSN=${{ secrets.SENTRY_LARAVEL_DSN_STAGING }}" >> .env
          echo "SENTRY_TRACES_SAMPLE_RATE=${{ secrets.SENTRY_TRACES_SAMPLE_RATE_STAGING }}" >> .env

      - name: Install PHP and Composer
        run: sudo apt-get install -y php-cli unzip curl && curl -sS https://getcomposer.org/installer | php

      - name: ðŸ“‚ Sync files via FTP (excluding vendor folder)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
            server: ${{ secrets.FTP_HOST }}
            username: ${{ secrets.FTP_USERNAME }}
            password: ${{ secrets.FTP_PASSWORD }}
            local-dir: ./  # Upload all files
            server-dir: ${{ secrets.FTP_TARGET_DIR }}  # Remote directory
            exclude: |
              vendor
              node_modules
              .git*
              .env  # Exclude other sensitive files if needed

      # Step 5: SSH into HPanel and run 'composer install'
      - name: Run Composer Install on HPanel
        run: |
          sshpass -p ${{ secrets.FTP_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_HOST }} <<EOF
          cd ${{ secrets.FTP_TARGET_DIR }}
          php composer.phar install --no-dev --prefer-dist --optimize-autoloader
          php artisan migrate
          exit
          EOF

