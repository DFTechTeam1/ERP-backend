# Version of Docker Compose file format
# This specifies which version of the Docker Compose API to use
# Version 3.8 is current and supports most features
# version: '3.8'

# Services section - defines the containers to run
services:
  # PHP-FPM Service for Laravel
  app:
    # Build instruction - tells Docker to build an image from Dockerfile
    # The '.' means "use the Dockerfile in the current directory"
    build: .
    
    # Custom name for this container (optional)
    # Without this, Docker would generate a random name
    container_name: erp-backend
    
    # Volume mounts - sync files between host and container
    # Format: host_path:container_path
    # './:/var/www/html' syncs current directory to container's web root
    volumes:
      - ./:/var/www/html  # Live code sync - changes reflect immediately
    
    # Set the working directory inside the container
    # Commands run in the container will start from this directory
    working_dir: /var/www/html

    environment:
      - PHP_UPLOAD_MAX_FILESIZE=100M
      - PHP_POST_MAX_SIZE=100M
    
    # Dependency management - ensures these services start first
    depends_on:
      - db   # Database should be ready before app
      - redis # Redis should be ready before app
    
    # Network connections - which networks this container joins
    networks:
      - erp-backend-network  # Custom network for our app

  # Nginx Web Server
  webserver:
    # Use a pre-built image from Docker Hub instead of building from Dockerfile
    # 'nginx:alpine' is a lightweight version of Nginx
    image: nginx:alpine
    
    container_name: erp-backend-webserver
    
    # Port mapping: host_port:container_port
    # Maps host port 8000 to container port 80
    # Access via http://localhost:8000
    ports:
      - "8100:80"
    
    volumes:
      # Sync application code
      - ./:/var/www/html
      # Mount custom Nginx configuration file
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf
    
    # This service depends on the app service being ready
    depends_on:
      - app
    
    networks:
      - erp-backend-network

  # MySQL Database
  db:
    image: mysql:8.0  # Use MySQL version 8.0

    container_name: erp-backend-db
    
    # Restart policy: automatically restart unless manually stopped
    restart: always
    
    # Environment variables for MySQL configuration
    environment:
      MYSQL_DATABASE: erp_live_latest    # Create database named 'laravel'
      MYSQL_ROOT_PASSWORD: password # Root password
      MYSQL_PASSWORD: password      # User password
    
    # Persistent data storage using Docker volumes
    # 'dbdata' volume will persist even if container is removed
    volumes:
      - dbdata:/var/lib/mysql
    
    # Expose MySQL port to host machine (optional)
    # Allows external tools to connect to MySQL
    ports:
      - "3406:3306"
    
    networks:
      - erp-backend-network

    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      timeout: 20s
      retries: 10

  # Redis for Caching
  redis:
    image: redis:alpine  # Lightweight Redis image
    container_name: erp-backend-redis
    
    # Expose Redis port to host machine
    ports:
      - "6479:6379"
    
    networks:
      - erp-backend-network

  # PHPMyAdmin (Web-based MySQL management)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: erp-backend-pma
    
    # Requires database service to be running
    depends_on:
      - db
    
    # Configuration for PHPMyAdmin
    environment:
      PMA_HOST: db      # Connect to the 'db' service
      PMA_PORT: 3306    # MySQL port
      PMA_LIMIT: 512M   # Set limit upload
      UPLOAD_LIMIT: 512M
    
    # Access PHPMyAdmin at http://localhost:8180
    ports:
      - "8180:80"

    # Load configuration to volumes
    volumes:
      - ./docker/phpmyadmin/config.user.inc.php:/etc/phpmyadmin/config.user.inc.php
    
    networks:
      - erp-backend-network

# Define networks for communication between containers
networks:
  erp-backend-network:
    driver: bridge  # Default network driver for single-host communication

# Define persistent volumes for data storage
volumes:
  dbdata:
    driver: local  # Store data on host machine (not in container)